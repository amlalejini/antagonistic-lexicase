#!/bin/bash
########## Define Resources Needed with SBATCH Lines ##########
 
#SBATCH --time=72:00:00            # limit of wall clock time - how long the job will run (same as -t)
#SBATCH --array=1-700
#SBATCH --mem=8G                    # memory required per node - amount of memory (in bytes)
#SBATCH --job-name psf-sm           # you can give your job a name for easier identification (same as -J)
#SBATCH --account=devolab

########## Command Lines to Run ##########

##################################
# Setup relevant directories
DATA_DIR=/mnt/scratch/lalejini/data/ant-lex/prog-synth-exp/data
CONFIG_DIR=/mnt/scratch/lalejini/data/ant-lex/prog-synth-exp/config
EXAMPLES_DIR=/mnt/scratch/lalejini/data/ant-lex/prog-synth-exp/examples

##################################
# Setup random seed info
PROBLEM_SEED_OFFSET=8000
SEED=$((SLURM_ARRAY_TASK_ID + PROBLEM_SEED_OFFSET))

##################################
# A few utility variables
TRAINING_EXAMPLE_MODE__COEVO=0
TRAINING_EXAMPLE_MODE__STATIC=1
TRAINING_EXAMPLE_MODE__RAND=2
TRAINING_EXAMPLE_MODE__STATIC_GEN=3
TRAINING_EXAMPLE_MODE__STATIC_COEVO=4

SELECTION_MODE__LEX=0
SELECTION_MODE__COHORT_LEX=1
SELECTION_MODE__TOURNAMENT=2
SELECTION_MODE__DRIFT=3

EVAL_MODE__COHORTS=0
EVAL_MODE__FULL=1

##################################
# Setup general configuration
BENCHMARK_DATA_DIR=${EXAMPLES_DIR}
COHORT_GENERATIONS=32000
FULL_GENERATIONS=2000
TRAINING_GENERATIONS=10240

#COHORT_GENERATIONS=16000
#FULL_GENERATIONS=1000
#TRAINING_GENERATIONS=5120

COHORT_SNAPSHOT_INTERVAL=1600
FULL_SNAPSHOT_INTERVAL=100
TRAINING_SNAPSHOT_INTERVAL=512

COHORT_STATS_INTERVAL=400
FULL_STATS_INTERVAL=25
TRAINING_STATS_INTERVAL=128

PROG_POP_SIZE=512
TEST_POP_SIZE=512
PROG_COHORT_SIZE=32
TEST_COHORT_SIZE=32

##################################
# Problem-specific configuration
PROBLEM=smallest
MAX_PROG_SIZE=64
PROG_EVAL_TIME=64

###### Treatments #######
TREATMENT__TESTS_STATIC__SEL_LEX__MIN=1
TREATMENT__TESTS_STATIC__SEL_LEX__MAX=100

TREATMENT__TESTS_RANDOM__SEL_LEX__MIN=101
TREATMENT__TESTS_RANDOM__SEL_LEX__MAX=200

TREATMENT__TESTS_DRIFT__SEL_LEX__MIN=201
TREATMENT__TESTS_DRIFT__SEL_LEX__MAX=300

TREATMENT__TESTS_COEVO__SEL_LEX__MIN=301
TREATMENT__TESTS_COEVO__SEL_LEX__MAX=400

TREATMENT__TESTS_COEVO_STATIC__SEL_LEX__MIN=401
TREATMENT__TESTS_COEVO_STATIC__SEL_LEX__MAX=500

TREATMENT__TESTS_COEVO_DISCRIM__SEL_LEX__MIN=501
TREATMENT__TESTS_COEVO_DISCRIM__SEL_LEX__MAX=600

TREATMENT__TESTS_STATIC_TRAINING__SEL_LEX__MIN=601
TREATMENT__TESTS_STATIC_TRAINING__SEL_LEX__MAX=700

####################################################################

if [ ${SLURM_ARRAY_TASK_ID} -ge ${TREATMENT__TESTS_STATIC__SEL_LEX__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TREATMENT__TESTS_STATIC__SEL_LEX__MAX} ] ; then
  NAME=TESTS_STATIC__SEL_LEX
  EVALUATION_MODE=${EVAL_MODE__FULL}
  TRAINING_EXAMPLE_MODE=${TRAINING_EXAMPLE_MODE__STATIC_GEN}
  PROG_SELECTION_MODE=${SELECTION_MODE__LEX}
  TEST_SELECTION_MODE=${SELECTION_MODE__LEX}
  GENERATIONS=${FULL_GENERATIONS}
  SNAPSHOT_INTERVAL=${FULL_SNAPSHOT_INTERVAL}
  SUMMARY_STATS_INTERVAL=${FULL_STATS_INTERVAL}
  DISCRIMINATORY_LEXICASE_TESTS=0

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${TREATMENT__TESTS_RANDOM__SEL_LEX__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TREATMENT__TESTS_RANDOM__SEL_LEX__MAX} ] ; then
  NAME=TESTS_RANDOM__SEL_LEX
  EVALUATION_MODE=${EVAL_MODE__FULL}
  TRAINING_EXAMPLE_MODE=${TRAINING_EXAMPLE_MODE__RAND}
  PROG_SELECTION_MODE=${SELECTION_MODE__LEX}
  TEST_SELECTION_MODE=${SELECTION_MODE__LEX}
  GENERATIONS=${FULL_GENERATIONS}
  SNAPSHOT_INTERVAL=${FULL_SNAPSHOT_INTERVAL}
  SUMMARY_STATS_INTERVAL=${FULL_SNAPSHOT_INTERVAL}
  DISCRIMINATORY_LEXICASE_TESTS=0

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${TREATMENT__TESTS_DRIFT__SEL_LEX__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TREATMENT__TESTS_DRIFT__SEL_LEX__MAX} ] ; then
  NAME=TESTS_DRIFT__SEL_LEX
  EVALUATION_MODE=${EVAL_MODE__FULL}
  TRAINING_EXAMPLE_MODE=${TRAINING_EXAMPLE_MODE__COEVO}
  PROG_SELECTION_MODE=${SELECTION_MODE__LEX}
  TEST_SELECTION_MODE=${SELECTION_MODE__DRIFT}
  GENERATIONS=${FULL_GENERATIONS}
  SNAPSHOT_INTERVAL=${FULL_SNAPSHOT_INTERVAL}
  SUMMARY_STATS_INTERVAL=${FULL_SNAPSHOT_INTERVAL}
  DISCRIMINATORY_LEXICASE_TESTS=0

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${TREATMENT__TESTS_COEVO__SEL_LEX__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TREATMENT__TESTS_COEVO__SEL_LEX__MAX} ] ; then
  NAME=TESTS_COEVO__SEL_LEX
  EVALUATION_MODE=${EVAL_MODE__FULL}
  TRAINING_EXAMPLE_MODE=${TRAINING_EXAMPLE_MODE__COEVO}
  PROG_SELECTION_MODE=${SELECTION_MODE__LEX}
  TEST_SELECTION_MODE=${SELECTION_MODE__LEX}
  GENERATIONS=${FULL_GENERATIONS}
  SNAPSHOT_INTERVAL=${FULL_SNAPSHOT_INTERVAL}
  SUMMARY_STATS_INTERVAL=${FULL_SNAPSHOT_INTERVAL}
  DISCRIMINATORY_LEXICASE_TESTS=0

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${TREATMENT__TESTS_COEVO_STATIC__SEL_LEX__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TREATMENT__TESTS_COEVO_STATIC__SEL_LEX__MAX} ] ; then
  NAME=TESTS_COEVO_STATIC__SEL_LEX
  EVALUATION_MODE=${EVAL_MODE__FULL}
  TRAINING_EXAMPLE_MODE=${TRAINING_EXAMPLE_MODE__STATIC_COEVO}
  PROG_SELECTION_MODE=${SELECTION_MODE__LEX}
  TEST_SELECTION_MODE=${SELECTION_MODE__LEX}
  GENERATIONS=${FULL_GENERATIONS}
  SNAPSHOT_INTERVAL=${FULL_SNAPSHOT_INTERVAL}
  SUMMARY_STATS_INTERVAL=${FULL_SNAPSHOT_INTERVAL}
  DISCRIMINATORY_LEXICASE_TESTS=0

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${TREATMENT__TESTS_COEVO_DISCRIM__SEL_LEX__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TREATMENT__TESTS_COEVO_DISCRIM__SEL_LEX__MAX} ] ; then
  NAME=TESTS_COEVO_DISCRIM__SEL_LEX
  EVALUATION_MODE=${EVAL_MODE__FULL}
  TRAINING_EXAMPLE_MODE=${TRAINING_EXAMPLE_MODE__COEVO}
  PROG_SELECTION_MODE=${SELECTION_MODE__LEX}
  TEST_SELECTION_MODE=${SELECTION_MODE__LEX}
  GENERATIONS=${FULL_GENERATIONS}
  SNAPSHOT_INTERVAL=${FULL_SNAPSHOT_INTERVAL}
  SUMMARY_STATS_INTERVAL=${FULL_SNAPSHOT_INTERVAL}
  DISCRIMINATORY_LEXICASE_TESTS=1

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${TREATMENT__TESTS_STATIC_TRAINING__SEL_LEX__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TREATMENT__TESTS_STATIC_TRAINING__SEL_LEX__MAX} ] ; then
  NAME=TESTS_STATIC_TRAINING__SEL_LEX
  EVALUATION_MODE=${EVAL_MODE__FULL}
  TRAINING_EXAMPLE_MODE=${TRAINING_EXAMPLE_MODE__STATIC}
  PROG_SELECTION_MODE=${SELECTION_MODE__LEX}
  TEST_SELECTION_MODE=${SELECTION_MODE__LEX}
  GENERATIONS=${TRAINING_GENERATIONS}
  SNAPSHOT_INTERVAL=${TRAINING_SNAPSHOT_INTERVAL}
  SUMMARY_STATS_INTERVAL=${TRAINING_STATS_INTERVAL}
  DISCRIMINATORY_LEXICASE_TESTS=0

else
  echo "${SEED} from ${PROBLEM} failed to launch" >> /mnt/home/lalejini/devo_ws/antagonistic-lexicase/hpcc/sub/ps-failtolaunch.txt

fi

####################################################################


RUN_NAME=PROBLEM_${PROBLEM}__${NAME}__${SEED}
RUN_DIR=${DATA_DIR}/${RUN_NAME}

# make a run directory
mkdir -p ${RUN_DIR}

cd ${RUN_DIR}

cp -R ${CONFIG_DIR}/* .

echo "./prog_synth -SEED ${SEED} -BENCHMARK_DATA_DIR ${BENCHMARK_DATA_DIR} -PROG_POP_SIZE ${PROG_POP_SIZE} -TEST_POP_SIZE ${TEST_POP_SIZE} -PROG_COHORT_SIZE ${PROG_COHORT_SIZE} -TEST_COHORT_SIZE ${TEST_COHORT_SIZE} -PROBLEM ${PROBLEM} -MAX_PROG_SIZE ${MAX_PROG_SIZE} -PROG_EVAL_TIME ${PROG_EVAL_TIME} -EVALUATION_MODE ${EVALUATION_MODE} -TRAINING_EXAMPLE_MODE ${TRAINING_EXAMPLE_MODE} -PROG_SELECTION_MODE ${PROG_SELECTION_MODE} -TEST_SELECTION_MODE ${TEST_SELECTION_MODE} -GENERATIONS ${GENERATIONS} -SNAPSHOT_INTERVAL ${SNAPSHOT_INTERVAL} -SUMMARY_STATS_INTERVAL ${SUMMARY_STATS_INTERVAL} -DISCRIMINATORY_LEXICASE_TESTS ${DISCRIMINATORY_LEXICASE_TESTS} > run.log" > ./cmd.txt

./prog_synth -SEED ${SEED} -BENCHMARK_DATA_DIR ${BENCHMARK_DATA_DIR} -PROG_POP_SIZE ${PROG_POP_SIZE} -TEST_POP_SIZE ${TEST_POP_SIZE} -PROG_COHORT_SIZE ${PROG_COHORT_SIZE} -TEST_COHORT_SIZE ${TEST_COHORT_SIZE} -PROBLEM ${PROBLEM} -MAX_PROG_SIZE ${MAX_PROG_SIZE} -PROG_EVAL_TIME ${PROG_EVAL_TIME} -EVALUATION_MODE ${EVALUATION_MODE} -TRAINING_EXAMPLE_MODE ${TRAINING_EXAMPLE_MODE} -PROG_SELECTION_MODE ${PROG_SELECTION_MODE} -TEST_SELECTION_MODE ${TEST_SELECTION_MODE} -GENERATIONS ${GENERATIONS} -SNAPSHOT_INTERVAL ${SNAPSHOT_INTERVAL} -SUMMARY_STATS_INTERVAL ${SUMMARY_STATS_INTERVAL} -DISCRIMINATORY_LEXICASE_TESTS ${DISCRIMINATORY_LEXICASE_TESTS} > run.log