#!/bin/bash
########## Define Resources Needed with SBATCH Lines ##########
 
#SBATCH --time=48:00:00            # limit of wall clock time - how long the job will run (same as -t)
#SBATCH --array=1-150
#SBATCH --mem=4G                    # memory required per node - amount of memory (in bytes)
#SBATCH --job-name ps-med           # you can give your job a name for easier identification (same as -J)
#SBATCH --account=devolab

########## Command Lines to Run ##########

##################################
# Load necessary modules
module load powertools
module load GNU/7.3.0-2.30

##################################
# Setup relevant directories
DATA_DIR=/mnt/scratch/lalejini/data/ant-lex/prog-synth-prelim/data
CONFIG_DIR=/mnt/scratch/lalejini/data/ant-lex/prog-synth-prelim/config
EXAMPLES_DIR=/mnt/scratch/lalejini/data/ant-lex/prog-synth-prelim/examples

##################################
# Setup random seed info
PROBLEM_SEED_OFFSET=1950
SEED=$((SLURM_ARRAY_TASK_ID + PROBLEM_SEED_OFFSET)) # TODO - test this

##################################
# A few utility variables
TRAINING_EXAMPLE_MODE__COEVO=0
TRAINING_EXAMPLE_MODE__STATIC=1
TRAINING_EXAMPLE_MODE__RAND=2
TRAINING_EXAMPLE_MODE__STATIC_GEN=3

SELECTION_MODE__LEX=0
SELECTION_MODE__COHORT_LEX=1
SELECTION_MODE__TOURNAMENT=2
SELECTION_MODE__DRIFT=3

##################################
# Setup general configuration
BENCHMARK_DATA_DIR=${EXAMPLES_DIR}
GENERATIONS=10000
PROG_POP_SIZE=512
TEST_POP_SIZE=512
PROG_COHORT_SIZE=32
TEST_COHORT_SIZE=32

##################################
# Problem-specific configuration
PROBLEM=median
MAX_PROG_SIZE=64
PROG_EVAL_TIME=64

# Things that vary by treatment:
# - evaluation mode
# - prog selection mode
# - test selection mode
TREATMENT__TESTS_COEVO__MIN=1
TREATMENT__TESTS_COEVO__MAX=30

TREATMENT__TESTS_STATIC_COHORTS__MIN=31
TREATMENT__TESTS_STATIC_COHORTS__MAX=60

TREATMENT__TESTS_STATIC_FULL__MIN=61
TREATMENT__TESTS_STATIC_FULL__MAX=90

TREATMENT__TESTS_RANDOM__MIN=91
TREATMENT__TESTS_RANDOM__MAX=120

TREATMENT__TESTS_DRIFT__MIN=121
TREATMENT__TESTS_DRIFT__MAX=150


if [ ${SLURM_ARRAY_TASK_ID} -ge ${TREATMENT__TESTS_COEVO__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TREATMENT__TESTS_COEVO__MAX} ] ; then
  NAME=TESTS_COEVO
  EVALUATION_MODE=0
  TRAINING_EXAMPLE_MODE=${TRAINING_EXAMPLE_MODE__COEVO}
  PROG_SELECTION_MODE=${SELECTION_MODE__COHORT_LEX}
  TEST_SELECTION_MODE=${SELECTION_MODE__COHORT_LEX}

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${TREATMENT__TESTS_STATIC_COHORTS__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TREATMENT__TESTS_STATIC_COHORTS__MAX} ] ; then
  NAME=TESTS_STATIC_COHORTS
  EVALUATION_MODE=0
  TRAINING_EXAMPLE_MODE=${TRAINING_EXAMPLE_MODE__STATIC_GEN}
  PROG_SELECTION_MODE=${SELECTION_MODE__COHORT_LEX}
  TEST_SELECTION_MODE=${SELECTION_MODE__COHORT_LEX}

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${TREATMENT__TESTS_STATIC_FULL__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TREATMENT__TESTS_STATIC_FULL__MAX} ] ; then
  NAME=TESTS_STATIC_FULL
  EVALUATION_MODE=1
  TRAINING_EXAMPLE_MODE=${TRAINING_EXAMPLE_MODE__STATIC}
  PROG_SELECTION_MODE=${SELECTION_MODE__LEX}
  TEST_SELECTION_MODE=${SELECTION_MODE__COHORT_LEX}

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${TREATMENT__TESTS_RANDOM__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TREATMENT__TESTS_RANDOM__MAX} ] ; then
  NAME=TESTS_RANDOM
  EVALUATION_MODE=0
  TRAINING_EXAMPLE_MODE=${TRAINING_EXAMPLE_MODE__RAND}
  PROG_SELECTION_MODE=${SELECTION_MODE__COHORT_LEX}
  TEST_SELECTION_MODE=${SELECTION_MODE__COHORT_LEX}

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${TREATMENT__TESTS_DRIFT__MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${TREATMENT__TESTS_DRIFT__MAX} ] ; then
  NAME=TESTS_DRIFT
  EVALUATION_MODE=0
  TRAINING_EXAMPLE_MODE=${TRAINING_EXAMPLE_MODE__COEVO}
  PROG_SELECTION_MODE=${SELECTION_MODE__COHORT_LEX}
  TEST_SELECTION_MODE=${SELECTION_MODE__DRIFT}
else
  echo "${SEED} from ${PROBLEM} failed to launch" >> /mnt/home/lalejini/devo_ws/antagonistic-lexicase/hpcc/sub/failtolaunch.txt
fi

RUN_NAME=PROBLEM_${PROBLEM}__${NAME}__${SEED}
RUN_DIR=${DATA_DIR}/${RUN_NAME}

# make a run directory
mkdir -p ${RUN_DIR}

cd ${RUN_DIR}

cp -R ${CONFIG_DIR}/* .

# Run the experiment
echo "./prog_synth -SEED ${SEED} -BENCHMARK_DATA_DIR ${BENCHMARK_DATA_DIR} -GENERATIONS ${GENERATIONS} -PROG_POP_SIZE ${PROG_POP_SIZE} -TEST_POP_SIZE ${TEST_POP_SIZE} -PROG_COHORT_SIZE ${PROG_COHORT_SIZE} -TEST_COHORT_SIZE ${TEST_COHORT_SIZE} -PROBLEM ${PROBLEM} -MAX_PROG_SIZE ${MAX_PROG_SIZE} -PROG_EVAL_TIME ${PROG_EVAL_TIME} -EVALUATION_MODE ${EVALUATION_MODE} -TRAINING_EXAMPLE_MODE ${TRAINING_EXAMPLE_MODE} -PROG_SELECTION_MODE ${PROG_SELECTION_MODE} -TEST_SELECTION_MODE ${TEST_SELECTION_MODE} > run.log" > ./cmd.txt

./prog_synth -SEED ${SEED} -BENCHMARK_DATA_DIR ${BENCHMARK_DATA_DIR} -GENERATIONS ${GENERATIONS} -PROG_POP_SIZE ${PROG_POP_SIZE} -TEST_POP_SIZE ${TEST_POP_SIZE} -PROG_COHORT_SIZE ${PROG_COHORT_SIZE} -TEST_COHORT_SIZE ${TEST_COHORT_SIZE} -PROBLEM ${PROBLEM} -MAX_PROG_SIZE ${MAX_PROG_SIZE} -PROG_EVAL_TIME ${PROG_EVAL_TIME} -EVALUATION_MODE ${EVALUATION_MODE} -TRAINING_EXAMPLE_MODE ${TRAINING_EXAMPLE_MODE} -PROG_SELECTION_MODE ${PROG_SELECTION_MODE} -TEST_SELECTION_MODE ${TEST_SELECTION_MODE} > run.log



