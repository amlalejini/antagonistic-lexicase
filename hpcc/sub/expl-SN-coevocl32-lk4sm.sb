#!/bin/bash
########## Define Resources Needed with SBATCH Lines ##########
 
#SBATCH --time=144:00:00             # limit of wall clock time - how long the job will run (same as -t)
#SBATCH --array=1001-1270
#SBATCH --mem=2G                        # memory required per node - amount of memory (in bytes)
#SBATCH --job-name coevo_lk4sm      # you can give your job a name for easier identification (same as -J)
 
 
########## Command Lines to Run ##########

module load powertools
module load GNU/7.3.0-2.30

EXPLORATION=TEST_MODE

DATA_DIR=/mnt/scratch/lalejini/data/ant-lex/exploration/COEVO32_LK4SMLL/data
CONFIG_DIR=/mnt/scratch/lalejini/data/ant-lex/exploration/COEVO32_LK4SMLL/config

# Treatments
# - Crossover on backbone
COEVOCL32_POP1024_SPT16_XP025_MUTP090_MIN=1001
COEVOCL32_POP1024_SPT16_XP025_MUTP090_MAX=1030

COEVOCL32_POP1024_SPT16_XP010_MUTP090_MIN=1031
COEVOCL32_POP1024_SPT16_XP010_MUTP090_MAX=1060

COEVOCL32_POP1024_SPT16_XP005_MUTP090_MIN=1061
COEVOCL32_POP1024_SPT16_XP005_MUTP090_MAX=1090

# - Mut on backbone
COEVOCL32_POP1024_SPT16_XP025_MUTP090_MIN=1091
COEVOCL32_POP1024_SPT16_XP025_MUTP090_MAX=1120

COEVOCL32_POP1024_SPT16_XP025_MUTP095_MIN=1121
COEVOCL32_POP1024_SPT16_XP025_MUTP095_MAX=1150

COEVOCL32_POP1024_SPT16_XP025_MUTP075_MIN=1151
COEVOCL32_POP1024_SPT16_XP025_MUTP075_MAX=1180

# - Pop on backbone
COEVOCL32_POP4096_SPT8_XP025_MUTP090_MIN=1181
COEVOCL32_POP4096_SPT8_XP025_MUTP090_MAX=1210

COEVOCL32_POP4096_SPT16_XP025_MUTP090_MIN=1211
COEVOCL32_POP4096_SPT16_XP025_MUTP090_MAX=1240

# - Random on big pop
RANDCL32_POP4096_SPT16_XP025_MUTP090_MIN=1241
RANDCL32_POP4096_SPT16_XP025_MUTP090_MAX=1270

# General parameters
SEED=${SLURM_ARRAY_TASK_ID}
GENERATIONS=750000
SELECTION_MODE=1

COHORT_SIZE=32

MAX_NETWORK_SIZE=128
MIN_NETWORK_SIZE=1

PER_INDEX_SUB=0.005000
PER_PAIR_INS=0.005000
PER_PAIR_DEL=0.005000
PER_PAIR_SWAP=0.005000

SORT_SIZE=16

PER_SITE_SUB=0.050000
PER_SEQ_INVERSION=0.100000
PER_SEQ_RANDOMIZE=0.010000

SNAPSHOT_INTERVAL=10000
AGGREGATE_STATS_INTERVAL=100
CORRECTNESS_SAMPLE_SIZE=4096
SOLUTION_SCREEN_INTERVAL=10000

if [ ${SLURM_ARRAY_TASK_ID} -ge ${COEVOCL32_POP1024_SPT16_XP025_MUTP090_MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${COEVOCL32_POP1024_SPT16_XP025_MUTP090_MAX} ] ; then 
NAME=COEVOCL32_POP1024_SPT16_XP025_MUTP090
NETWORK_POP_SIZE=1024
TEST_POP_SIZE=1024
PER_ORG_CROSSOVER=0.25
PER_ORG_MUTATION=0.90
SORTS_PER_TEST=16
TEST_MODE=0


elif [ ${SLURM_ARRAY_TASK_ID} -ge ${COEVOCL32_POP1024_SPT16_XP010_MUTP090_MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${COEVOCL32_POP1024_SPT16_XP010_MUTP090_MAX} ] ; then
NAME=COEVOCL32_POP1024_SPT16_XP010_MUTP090
NETWORK_POP_SIZE=1024
TEST_POP_SIZE=1024
PER_ORG_CROSSOVER=0.10
PER_ORG_MUTATION=0.90
SORTS_PER_TEST=16
TEST_MODE=0

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${COEVOCL32_POP1024_SPT16_XP005_MUTP090_MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${COEVOCL32_POP1024_SPT16_XP005_MUTP090_MAX} ] ; then
NAME=COEVOCL32_POP1024_SPT16_XP005_MUTP090
NETWORK_POP_SIZE=1024
TEST_POP_SIZE=1024
PER_ORG_CROSSOVER=0.05
PER_ORG_MUTATION=0.90
SORTS_PER_TEST=16
TEST_MODE=0

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${COEVOCL32_POP1024_SPT16_XP025_MUTP090_MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${COEVOCL32_POP1024_SPT16_XP025_MUTP090_MAX} ] ; then
NAME=COEVOCL32_POP1024_SPT16_XP025_MUTP090
NETWORK_POP_SIZE=1024
TEST_POP_SIZE=1024
PER_ORG_CROSSOVER=0.25
PER_ORG_MUTATION=0.90
SORTS_PER_TEST=16
TEST_MODE=0

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${COEVOCL32_POP1024_SPT16_XP025_MUTP095_MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${COEVOCL32_POP1024_SPT16_XP025_MUTP095_MAX} ] ; then
NAME=COEVOCL32_POP1024_SPT16_XP025_MUTP095
NETWORK_POP_SIZE=1024
TEST_POP_SIZE=1024
PER_ORG_CROSSOVER=0.25
PER_ORG_MUTATION=0.95
SORTS_PER_TEST=16
TEST_MODE=0

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${COEVOCL32_POP1024_SPT16_XP025_MUTP075_MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${COEVOCL32_POP1024_SPT16_XP025_MUTP075_MAX} ] ; then
NAME=COEVOCL32_POP1024_SPT16_XP025_MUTP075
NETWORK_POP_SIZE=1024
TEST_POP_SIZE=1024
PER_ORG_CROSSOVER=0.25
PER_ORG_MUTATION=0.75
SORTS_PER_TEST=16
TEST_MODE=0

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${COEVOCL32_POP4096_SPT8_XP025_MUTP090_MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${COEVOCL32_POP4096_SPT8_XP025_MUTP090_MAX} ] ; then
NAME=COEVOCL32_POP4096_SPT8_XP025_MUTP090
NETWORK_POP_SIZE=4096
TEST_POP_SIZE=4096
PER_ORG_CROSSOVER=0.25
PER_ORG_MUTATION=0.90
SORTS_PER_TEST=8
TEST_MODE=0

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${COEVOCL32_POP4096_SPT16_XP025_MUTP090_MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${COEVOCL32_POP4096_SPT16_XP025_MUTP090_MAX} ] ; then
NAME=COEVOCL32_POP4096_SPT16_XP025_MUTP090
NETWORK_POP_SIZE=4096
TEST_POP_SIZE=4096
PER_ORG_CROSSOVER=0.25
PER_ORG_MUTATION=0.90
SORTS_PER_TEST=16
TEST_MODE=0

elif [ ${SLURM_ARRAY_TASK_ID} -ge ${RANDCL32_POP4096_SPT16_XP025_MUTP090_MIN} ] && [ ${SLURM_ARRAY_TASK_ID} -le ${RANDCL32_POP4096_SPT16_XP025_MUTP090_MAX} ] ; then
NAME=RANDCL32_POP4096_SPT16_XP025_MUTP090
NETWORK_POP_SIZE=4096
TEST_POP_SIZE=4096
PER_ORG_CROSSOVER=0.25
PER_ORG_MUTATION=0.90
SORTS_PER_TEST=16
TEST_MODE=2

else
echo "${SEED}" >> /mnt/home/lalejini/devo_ws/antagonistic-lexicase/hpcc/sub/failtolaunch.txt

fi

RUN_NAME=${NAME}__${SEED}
RUN_DIR=${DATA_DIR}/${RUN_NAME}

# Make run directory
mkdir -p ${RUN_DIR}

cd ${RUN_DIR}

cp -R ${CONFIG_DIR}/* .

# Run experiment
./antagonistic_lexicase -SEED ${SEED} -GENERATIONS ${GENERATIONS} -SELECTION_MODE ${SELECTION_MODE} -COHORT_SIZE ${COHORT_SIZE} -MAX_NETWORK_SIZE ${MAX_NETWORK_SIZE} -MIN_NETWORK_SIZE ${MIN_NETWORK_SIZE} -PER_INDEX_SUB ${PER_INDEX_SUB} -PER_PAIR_INS ${PER_PAIR_INS} -PER_PAIR_DEL ${PER_PAIR_DEL} -PER_PAIR_SWAP ${PER_PAIR_SWAP} -SORT_SIZE ${SORT_SIZE} -PER_SITE_SUB ${PER_SITE_SUB} -PER_SEQ_INVERSION ${PER_SEQ_INVERSION} -PER_SEQ_RANDOMIZE ${PER_SEQ_RANDOMIZE} -SNAPSHOT_INTERVAL ${SNAPSHOT_INTERVAL} -AGGREGATE_STATS_INTERVAL ${AGGREGATE_STATS_INTERVAL} -CORRECTNESS_SAMPLE_SIZE ${CORRECTNESS_SAMPLE_SIZE} -SOLUTION_SCREEN_INTERVAL ${SOLUTION_SCREEN_INTERVAL} -NETWORK_POP_SIZE ${NETWORK_POP_SIZE} -TEST_POP_SIZE ${TEST_POP_SIZE} -PER_ORG_CROSSOVER ${PER_ORG_CROSSOVER} -PER_ORG_MUTATION ${PER_ORG_MUTATION} -SORTS_PER_TEST ${SORTS_PER_TEST} -TEST_MODE ${TEST_MODE} > run.log